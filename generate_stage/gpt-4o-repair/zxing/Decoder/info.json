{"project_name":"zxing","relative_path":"zxing/core/src/main/java/com/google/zxing/aztec/decoder/Decoder.java","file_name":"Decoder.java","package":"com.google.zxing.aztec.decoder","class_name":"Decoder","method_name":"getCharacter","source_code":"private static String getCharacter(Table table, int code) {\n  switch (table) {\n    case UPPER:\n      return UPPER_TABLE[code];\n    case LOWER:\n      return LOWER_TABLE[code];\n    case MIXED:\n      return MIXED_TABLE[code];\n    case PUNCT:\n      return PUNCT_TABLE[code];\n    case DIGIT:\n      return DIGIT_TABLE[code];\n    default:\n      // Should not reach here.\n      throw new IllegalStateException(\"Bad table\");\n  }\n}","context":"package com.google.zxing.aztec.decoder;\nimport com.google.zxing.FormatException;\nimport com.google.zxing.aztec.AztecDetectorResult;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.common.CharacterSetECI;\nimport com.google.zxing.common.DecoderResult;\nimport com.google.zxing.common.reedsolomon.GenericGF;\nimport com.google.zxing.common.reedsolomon.ReedSolomonDecoder;\nimport com.google.zxing.common.reedsolomon.ReedSolomonException;\nimport java.io.ByteArrayOutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\nfinal public class Decoder {\n    private enum Table{UPPER, LOWER, MIXED, DIGIT, PUNCT, BINARY}\n    static final private String UPPER_TABLE;\n    static final private String LOWER_TABLE;\n    static final private String MIXED_TABLE;\n    static final private String PUNCT_TABLE;\n    static final private String DIGIT_TABLE;\n    static final private Charset DEFAULT_ENCODING;\n    private AztecDetectorResult ddata;\n    public DecoderResult decode(AztecDetectorResult detectorResult)throws FormatException;\n    static public String highLevelDecode(boolean[] correctedBits)throws FormatException;\n    static private String getEncodedData(boolean[] correctedBits)throws FormatException;\n    static private Table getTable(char t);\n    static private String getCharacter(Table table, int code);\n    static final class CorrectedBitsResult {\n        final private boolean[] correctBits;\n        final private int errorsCorrected;\n        final private int ecLevel;\n        CorrectedBitsResult(boolean[] correctBits, int errorsCorrected, int ecLevel);\n    }\n    private CorrectedBitsResult correctBits(boolean[] rawbits)throws FormatException;\n    private boolean[] extractBits(BitMatrix matrix);\n    static private int readCode(boolean[] rawbits, int startIndex, int length);\n    static private byte readByte(boolean[] rawbits, int startIndex);\n    static byte[] convertBoolArrayToByteArray(boolean[] boolArr);\n    static private int totalBitsInLayer(int layers, boolean compact);\n}","docstring":"/**\n   * Gets the character (or string) corresponding to the passed code in the given table\n   *\n   * @param table the table used\n   * @param code the code of the character\n   */"}