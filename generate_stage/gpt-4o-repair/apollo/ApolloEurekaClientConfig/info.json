{"project_name":"apollo","relative_path":"apollo/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java","file_name":"ApolloEurekaClientConfig.java","package":"com.ctrip.framework.apollo.biz.eureka","class_name":"ApolloEurekaClientConfig","method_name":"getEurekaServerServiceUrls","source_code":"@Override\npublic List<String> getEurekaServerServiceUrls(String myZone) {\n  List<String> urls = bizConfig.eurekaServiceUrls();\n  return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;\n}","context":"package com.ctrip.framework.apollo.biz.eureka;\nimport com.ctrip.framework.apollo.biz.config.BizConfig;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.event.ApplicationReadyEvent;\nimport org.springframework.cloud.context.scope.refresh.RefreshScope;\nimport org.springframework.cloud.netflix.eureka.EurekaClientConfigBean;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.context.event.EventListener;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\nimport java.util.List;\npublic class ApolloEurekaClientConfig extends EurekaClientConfigBean {\n    final private BizConfig bizConfig;\n    final private RefreshScope refreshScope;\n    static final private String EUREKA_CLIENT_BEAN_NAME;\n    public ApolloEurekaClientConfig(BizConfig bizConfig, RefreshScope refreshScope);\n    public List<String> getEurekaServerServiceUrls(String myZone);\n    public  listenApplicationReadyEvent(ApplicationReadyEvent event);\n    private  refreshEurekaClient();\n    public boolean equals(Object o);\n}","docstring":"/**\n   * Assert only one zone: defaultZone, but multiple environments.\n   */"}