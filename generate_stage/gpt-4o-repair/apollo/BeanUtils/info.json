{"project_name":"apollo","relative_path":"apollo/apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java","file_name":"BeanUtils.java","package":"com.ctrip.framework.apollo.common.utils","class_name":"BeanUtils","method_name":"mapByKey","source_code":"@SuppressWarnings(\"unchecked\")\npublic static <K, V> Map<K, V> mapByKey(String key, List<?> list) {\n  Map<K, V> map = new HashMap<>();\n  if (CollectionUtils.isEmpty(list)) {\n    return map;\n  }\n  try {\n    Class<?> clazz = list.get(0).getClass();\n    Field field = deepFindField(clazz, key);\n    if (field == null) {\n        throw new IllegalArgumentException(\"Could not find the key\");\n    }\n    field.setAccessible(true);\n    for (Object o : list) {\n      map.put((K) field.get(o), (V) o);\n    }\n  } catch (Exception e) {\n    throw new BeanUtilsException(e);\n  }\n  return map;\n}","context":"package com.ctrip.framework.apollo.common.utils;\nimport com.ctrip.framework.apollo.common.exception.BeanUtilsException;\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeanWrapperImpl;\nimport org.springframework.util.CollectionUtils;\nimport java.beans.PropertyDescriptor;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\npublic class BeanUtils {\n    static public List<T> batchTransform(Class<T> clazz, List<> srcList);\n    static public T transform(Class<T> clazz, Object src);\n    static private String getNullPropertyNames(Object source);\n    static public Map<K, V> mapByKey(String key, List<> list);\n    static public Map<K, List<V>> aggByKeyToList(String key, List<> list);\n    static public Set<K> toPropertySet(String key, List<> list);\n    static private Field deepFindField(Class<> clazz, String key);\n    static public Object getProperty(Object obj, String fieldName);\n    static public  setProperty(Object obj, String fieldName, Object value);\n    static public  copyProperties(Object source, Object target, String ignoreProperties);\n    static public  copyEntityProperties(Object source, Object target);\n    static final private String COPY_IGNORED_PROPERTIES;\n}","docstring":"/**\n   * 用于将一个列表转换为列表中的对象的某个属性映射到列表中的对象\n   *\n   * <pre>\n   *      List<UserDTO> userList = userService.queryUsers();\n   *      Map<Integer, userDTO> userIdToUser = BeanUtil.mapByKey(\"userId\", userList);\n   * </pre>\n   *\n   * @param key 属性名\n   */"}