{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java","file_name":"FibonacciHeap.java","package":"com.thealgorithms.datastructures.heaps","class_name":"FibonacciHeap","method_name":"insert","source_code":"public HeapNode insert(int key) {\n    HeapNode toInsert = new HeapNode(key); // creates the node\n    if (this.empty()) {\n        this.min = toInsert;\n    } else { // tree is not empty\n        min.setNext(toInsert);\n        this.updateMin(toInsert);\n    }\n    this.numOfHeapNodes++;\n    this.numOfTrees++;\n    return toInsert;\n}","context":"package com.thealgorithms.datastructures.heaps;\npublic class FibonacciHeap {\n    static final private double GOLDEN_RATIO;\n    private HeapNode min;\n    static private int totalLinks;\n    static private int totalCuts;\n    private int numOfTrees;\n    private int numOfHeapNodes;\n    private int markedHeapNoodesCounter;\n    public FibonacciHeap();\n    public FibonacciHeap(int key);\n    public boolean empty();\n    public HeapNode insert(int key);\n    public  deleteMin();\n    public HeapNode findMin();\n    public  meld(FibonacciHeap heap2);\n    public int size();\n    public int[] countersRep();\n    public  delete(HeapNode x);\n    private  decreaseKey(HeapNode x, int delta);\n    public int potential();\n    static public int totalLinks();\n    static public int totalCuts();\n    private  updateMin(HeapNode posMin);\n    private  cascadingCuts(HeapNode curr);\n    private  cut(HeapNode curr);\n    private  successiveLink(HeapNode curr);\n    private HeapNode toBuckets(HeapNode curr);\n    private HeapNode fromBuckets(HeapNode buckets);\n    private HeapNode link(HeapNode c1, HeapNode c2);\n    public class HeapNode {\n        public int key;\n        private int rank;\n        private boolean marked;\n        private HeapNode child;\n        private HeapNode next;\n        private HeapNode prev;\n        private HeapNode parent;\n        public HeapNode(int key);\n        public int getKey();\n        private boolean isMarked();\n        private  mark();\n        private  setNext(HeapNode newNext);\n        private HeapNode getNext();\n        private boolean isRoot();\n    }\n}","docstring":"/**\n     * Creates a node (of type HeapNode) which contains the given key, and inserts it into the heap.\n     *\n     * @pre key>=0\n     * @post (numOfnodes = = $prev numOfnodes + 1)\n     * @post empty == false\n     * $ret = the HeapNode we inserted\n     */"}