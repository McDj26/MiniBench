{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/backtracking/FloodFill.java","file_name":"FloodFill.java","package":"com.thealgorithms.backtracking","class_name":"FloodFill","method_name":"floodFill","source_code":"public static void floodFill(final int[][] image, final int x, final int y, final int newColor, final int oldColor) {\n    if (newColor == oldColor || x < 0 || x >= image.length || y < 0 || y >= image[x].length || getPixel(image, x, y) != oldColor) {\n        return;\n    }\n    putPixel(image, x, y, newColor);\n    /* Recursively check for horizontally & vertically adjacent coordinates */\n    floodFill(image, x + 1, y, newColor, oldColor);\n    floodFill(image, x - 1, y, newColor, oldColor);\n    floodFill(image, x, y + 1, newColor, oldColor);\n    floodFill(image, x, y - 1, newColor, oldColor);\n    /* Recursively check for diagonally adjacent coordinates  */\n    floodFill(image, x + 1, y - 1, newColor, oldColor);\n    floodFill(image, x - 1, y + 1, newColor, oldColor);\n    floodFill(image, x + 1, y + 1, newColor, oldColor);\n    floodFill(image, x - 1, y - 1, newColor, oldColor);\n}","context":"package com.thealgorithms.backtracking;\nfinal public class FloodFill {\n    private FloodFill();\n    static public int getPixel(int[][] image, int x, int y);\n    static public  putPixel(int[][] image, int x, int y, int newColor);\n    static public  floodFill(int[][] image, int x, int y, int newColor, int oldColor);\n}","docstring":"/**\n     * Fill the 2D image with new color\n     *\n     * @param image The image to be filled\n     * @param x The x co-ordinate at which color is to be filled\n     * @param y The y co-ordinate at which color is to be filled\n     * @param newColor The new color which to be filled in the image\n     * @param oldColor The old color which is to be replaced in the image\n     */"}