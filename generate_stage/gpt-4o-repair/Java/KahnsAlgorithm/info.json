{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java","file_name":"KahnsAlgorithm.java","package":"com.thealgorithms.datastructures.graphs","class_name":"KahnsAlgorithm","method_name":"topSortOrder","source_code":"ArrayList<E> topSortOrder() {\n    calculateInDegree();\n    Queue<E> q = new LinkedList<E>();\n    for (E vertex : inDegree.keySet()) {\n        if (inDegree.get(vertex) == 0) {\n            q.add(vertex);\n        }\n    }\n    ArrayList<E> answer = new ArrayList<>();\n    while (!q.isEmpty()) {\n        E current = q.poll();\n        answer.add(current);\n        for (E adjacent : graph.getAdjacents(current)) {\n            inDegree.put(adjacent, inDegree.get(adjacent) - 1);\n            if (inDegree.get(adjacent) == 0) {\n                q.add(adjacent);\n            }\n        }\n    }\n    return answer;\n}","context":"package com.thealgorithms.datastructures.graphs;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.Map;\nimport java.util.Queue;\nimport java.util.Set;\nclass AdjacencyList {\n    Map<E, ArrayList<E>> adj;\n    AdjacencyList();\n     addEdge(E from, E to);\n    ArrayList<E> getAdjacents(E v);\n    Set<E> getVertices();\n     printGraph();\n}\nclass TopologicalSort {\n    AdjacencyList<E> graph;\n    Map<E, Integer> inDegree;\n    TopologicalSort(AdjacencyList<E> graph);\n     calculateInDegree();\n    ArrayList<E> topSortOrder();\n}\npublic class KahnsAlgorithm {\n    static public  main(String args);\n}","docstring":"/**\n     * Returns an ArrayList with vertices arranged in topological order\n     */"}