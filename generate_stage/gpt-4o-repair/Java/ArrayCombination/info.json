{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java","file_name":"ArrayCombination.java","package":"com.thealgorithms.backtracking","class_name":"ArrayCombination","method_name":"combination","source_code":"public static List<TreeSet<Integer>> combination(int n, int k) {\n    if (n <= 0) {\n        return null;\n    }\n    length = k;\n    Integer[] arr = new Integer[n];\n    for (int i = 1; i <= n; i++) {\n        arr[i - 1] = i;\n    }\n    return Combination.combination(arr, length);\n}","context":"package com.thealgorithms.backtracking;\nimport java.util;\npublic class ArrayCombination {\n    static private int length;\n    static public List<TreeSet<Integer>> combination(int n, int k);\n}","docstring":"/**\n     * Find all combinations of 1..n by creating an array and using backtracking in Combination.java\n     * @param n max value of the array.\n     * @param k length of combination\n     * @return a list of all combinations of length k. If k == 0, return null.\n     */"}