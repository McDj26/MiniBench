{"project_name":"zxing","relative_path":"zxing/core/src/main/java/com/google/zxing/common/BitArray.java","file_name":"BitArray.java","package":"com.google.zxing.common","class_name":"BitArray","method_name":"getNextSet","source_code":"public int getNextSet(int from) {\n  if (from >= size) {\n    return size;\n  }\n  int bitsOffset = from / 32;\n  int currentBits = bits[bitsOffset];\n  // mask off lesser bits first\n  currentBits &= -(1 << (from & 0x1F));\n  while (currentBits == 0) {\n    if (++bitsOffset == bits.length) {\n      return size;\n    }\n    currentBits = bits[bitsOffset];\n  }\n  int result = (bitsOffset * 32) + Integer.numberOfTrailingZeros(currentBits);\n  return Math.min(result, size);\n}","context":"package com.google.zxing.common;\nimport java.util.Arrays;\nfinal public class BitArray implements Cloneable {\n    static final private int[] EMPTY_BITS;\n    static final private float LOAD_FACTOR;\n    private int[] bits;\n    private int size;\n    public BitArray();\n    public BitArray(int size);\n    BitArray(int[] bits, int size);\n    public int getSize();\n    public int getSizeInBytes();\n    private  ensureCapacity(int newSize);\n    public boolean get(int i);\n    public  set(int i);\n    public  flip(int i);\n    public int getNextSet(int from);\n    public int getNextUnset(int from);\n    public  setBulk(int i, int newBits);\n    public  setRange(int start, int end);\n    public  clear();\n    public boolean isRange(int start, int end, boolean value);\n    public  appendBit(boolean bit);\n    public  appendBits(int value, int numBits);\n    public  appendBitArray(BitArray other);\n    public  xor(BitArray other);\n    public  toBytes(int bitOffset, byte[] array, int offset, int numBytes);\n    public int[] getBitArray();\n    public  reverse();\n    static private int[] makeArray(int size);\n    public boolean equals(Object o);\n    public int hashCode();\n    public String toString();\n    public BitArray clone();\n}","docstring":"/**\n   * @param from first bit to check\n   * @return index of first bit that is set, starting from the given index, or size if none are set\n   *  at or beyond this given index\n   * @see #getNextUnset(int)\n   */"}