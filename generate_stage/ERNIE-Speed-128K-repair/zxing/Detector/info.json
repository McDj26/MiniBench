{"project_name":"zxing","relative_path":"zxing/core/src/main/java/com/google/zxing/aztec/detector/Detector.java","file_name":"Detector.java","package":"com.google.zxing.aztec.detector","class_name":"Detector","method_name":"getMatrixCenter","source_code":"private Point getMatrixCenter() {\n  ResultPoint pointA;\n  ResultPoint pointB;\n  ResultPoint pointC;\n  ResultPoint pointD;\n  //Get a white rectangle that can be the border of the matrix in center bull's eye or\n  try {\n    ResultPoint[] cornerPoints = new WhiteRectangleDetector(image).detect();\n    pointA = cornerPoints[0];\n    pointB = cornerPoints[1];\n    pointC = cornerPoints[2];\n    pointD = cornerPoints[3];\n  } catch (NotFoundException e) {\n    // This exception can be in case the initial rectangle is white\n    // In that case, surely in the bull's eye, we try to expand the rectangle.\n    int cx = image.getWidth() / 2;\n    int cy = image.getHeight() / 2;\n    pointA = getFirstDifferent(new Point(cx + 7, cy - 7), false, 1, -1).toResultPoint();\n    pointB = getFirstDifferent(new Point(cx + 7, cy + 7), false, 1, 1).toResultPoint();\n    pointC = getFirstDifferent(new Point(cx - 7, cy + 7), false, -1, 1).toResultPoint();\n    pointD = getFirstDifferent(new Point(cx - 7, cy - 7), false, -1, -1).toResultPoint();\n  }\n  //Compute the center of the rectangle\n  int cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0f);\n  int cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0f);\n  // Redetermine the white rectangle starting from previously computed center.\n  // This will ensure that we end up with a white rectangle in center bull's eye\n  // in order to compute a more accurate center.\n  try {\n    ResultPoint[] cornerPoints = new WhiteRectangleDetector(image, 15, cx, cy).detect();\n    pointA = cornerPoints[0];\n    pointB = cornerPoints[1];\n    pointC = cornerPoints[2];\n    pointD = cornerPoints[3];\n  } catch (NotFoundException e) {\n    // This exception can be in case the initial rectangle is white\n    // In that case we try to expand the rectangle.\n    pointA = getFirstDifferent(new Point(cx + 7, cy - 7), false, 1, -1).toResultPoint();\n    pointB = getFirstDifferent(new Point(cx + 7, cy + 7), false, 1, 1).toResultPoint();\n    pointC = getFirstDifferent(new Point(cx - 7, cy + 7), false, -1, 1).toResultPoint();\n    pointD = getFirstDifferent(new Point(cx - 7, cy - 7), false, -1, -1).toResultPoint();\n  }\n  // Recompute the center of the rectangle\n  cx = MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX() + pointC.getX()) / 4.0f);\n  cy = MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY() + pointC.getY()) / 4.0f);\n  return new Point(cx, cy);\n}","context":"package com.google.zxing.aztec.detector;\nimport com.google.zxing.NotFoundException;\nimport com.google.zxing.ResultPoint;\nimport com.google.zxing.aztec.AztecDetectorResult;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.common.GridSampler;\nimport com.google.zxing.common.detector.MathUtils;\nimport com.google.zxing.common.detector.WhiteRectangleDetector;\nimport com.google.zxing.common.reedsolomon.GenericGF;\nimport com.google.zxing.common.reedsolomon.ReedSolomonDecoder;\nimport com.google.zxing.common.reedsolomon.ReedSolomonException;\nfinal public class Detector {\n    static final private int[] EXPECTED_CORNER_BITS;\n    final private BitMatrix image;\n    private boolean compact;\n    private int nbLayers;\n    private int nbDataBlocks;\n    private int nbCenterLayers;\n    private int shift;\n    public Detector(BitMatrix image);\n    public AztecDetectorResult detect()throws NotFoundException;\n    public AztecDetectorResult detect(boolean isMirror)throws NotFoundException;\n    private int extractParameters(ResultPoint bullsEyeCorners)throws NotFoundException;\n    static private int getRotation(int[] sides, int length)throws NotFoundException;\n    static private CorrectedParameter getCorrectedParameterData(long parameterData, boolean compact)throws NotFoundException;\n    private ResultPoint getBullsEyeCorners(Point pCenter)throws NotFoundException;\n    private Point getMatrixCenter();\n    private ResultPoint getMatrixCornerPoints(ResultPoint bullsEyeCorners);\n    private BitMatrix sampleGrid(BitMatrix image, ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomRight, ResultPoint bottomLeft)throws NotFoundException;\n    private int sampleLine(ResultPoint p1, ResultPoint p2, int size);\n    private boolean isWhiteOrBlackRectangle(Point p1, Point p2, Point p3, Point p4);\n    private int getColor(Point p1, Point p2);\n    private Point getFirstDifferent(Point init, boolean color, int dx, int dy);\n    static private ResultPoint expandSquare(ResultPoint cornerPoints, int oldSide, int newSide);\n    private boolean isValid(int x, int y);\n    private boolean isValid(ResultPoint point);\n    static private float distance(Point a, Point b);\n    static private float distance(ResultPoint a, ResultPoint b);\n    private int getDimension();\n    static final class Point {\n        final private int x;\n        final private int y;\n        ResultPoint toResultPoint();\n        Point(int x, int y);\n        int getX();\n        int getY();\n        public String toString();\n    }\n    static final class CorrectedParameter {\n        final private int data;\n        final private int errorsCorrected;\n        CorrectedParameter(int data, int errorsCorrected);\n        int getData();\n        int getErrorsCorrected();\n    }\n}","docstring":"/**\n   * Finds a candidate center point of an Aztec code from an image\n   *\n   * @return the center point\n   */"}