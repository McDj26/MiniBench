{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java","file_name":"Merge_K_SortedLinkedlist.java","package":"com.thealgorithms.datastructures.lists","class_name":"Merge_K_SortedLinkedlist","method_name":"mergeKList","source_code":"Node mergeKList(Node[] a, int N) {\n    // Min Heap\n    PriorityQueue<Node> min = new PriorityQueue<>(Comparator.comparingInt(x -> x.data));\n    // adding head of all linkedList in min heap\n    min.addAll(Arrays.asList(a).subList(0, N));\n    // Make new head among smallest heads in K linkedList\n    Node head = min.poll();\n    min.add(head.next);\n    Node curr = head;\n    // merging LinkedList\n    while (!min.isEmpty()) {\n        Node temp = min.poll();\n        curr.next = temp;\n        curr = temp;\n        // Add Node in min Heap only if temp.next is not null\n        if (temp.next != null) {\n            min.add(temp.next);\n        }\n    }\n    return head;\n}","context":"package com.thealgorithms.datastructures.lists;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\npublic class Merge_K_SortedLinkedlist {\n    Node mergeKList(Node a, int N);\n    private class Node {\n        private int data;\n        private Node next;\n    }\n}","docstring":"/**\n     * This function merge K sorted LinkedList\n     *\n     * @param a array of LinkedList\n     * @param N size of array\n     * @return node\n     */"}