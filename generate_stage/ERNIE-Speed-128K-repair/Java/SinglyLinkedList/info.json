{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java","file_name":"SinglyLinkedList.java","package":"com.thealgorithms.datastructures.lists","class_name":"SinglyLinkedList","method_name":"middle","source_code":"public Node middle() {\n    if (head == null) {\n        return null;\n    }\n    Node firstCounter = head;\n    Node secondCounter = firstCounter.next;\n    while (secondCounter != null && secondCounter.next != null) {\n        firstCounter = firstCounter.next;\n        secondCounter = secondCounter.next.next;\n    }\n    return firstCounter;\n}","context":"package com.thealgorithms.datastructures.lists;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.StringJoiner;\npublic class SinglyLinkedList implements Iterable<Integer> {\n    private Node head;\n    private int size;\n    public SinglyLinkedList();\n    public SinglyLinkedList(Node head, int size);\n    public boolean detectLoop();\n    public Node middle();\n    public  swapNodes(int valueFirst, int valueSecond);\n    public Node reverseListIter(Node node);\n    public Node reverseListRec(Node head);\n    public  clear();\n    public boolean isEmpty();\n    public int size();\n    public Node getHead();\n    public  setHead(Node head);\n    public int count();\n    public boolean search(int key);\n    public String toString();\n    public  deleteDuplicates();\n    public  print();\n    public  insertHead(int x);\n    public  insert(int data);\n    public  insertNth(int data, int position);\n    public  deleteHead();\n    public  delete();\n    public  deleteNth(int position);\n    public int getNth(int index);\n    public  checkBounds(int position, int low, int high);\n    static public  main(String arg);\n    public Iterator<Integer> iterator();\n    private class SinglyLinkedListIterator implements Iterator<Integer> {\n        private Node current;\n        SinglyLinkedListIterator();\n        public boolean hasNext();\n        public Integer next();\n    }\n}\nclass Node {\n    int value;\n    Node next;\n    Node();\n    Node(int value);\n    Node(int value, Node next);\n}","docstring":"/**\n     * Return the node in the middle of the list\n     * If the length of the list is even then return item number length/2\n     * @return middle node of the list\n     */"}