{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/sorts/HeapSort.java","file_name":"HeapSort.java","package":"com.thealgorithms.sorts","class_name":"HeapSort","method_name":"sort","source_code":"@Override\npublic <T extends Comparable<T>> T[] sort(T[] unsorted) {\n    int n = unsorted.length;\n    heapify(unsorted, n);\n    while (n > 1) {\n        swap(unsorted, 1, n--);\n        siftDown(unsorted, 1, n);\n    }\n    return unsorted;\n}","context":"package com.thealgorithms.sorts;\npublic class HeapSort implements SortAlgorithm {\n    public T sort(T unsorted);\n    static private  heapify(T unsorted, int n);\n    static private  siftDown(T unsorted, int k, int n);\n    static private  swap(T array, int idx, int idy);\n    static private boolean less(T array, int idx, int idy);\n}","docstring":"/**\n     * For simplicity, we are considering the heap root index as 1 instead of 0.\n     * It simplifies future calculations. Because of that we are decreasing the\n     * provided indexes by 1 in {@link #swap(Object[], int, int)} and\n     * {@link #less(Comparable[], int, int)} functions.\n     */"}