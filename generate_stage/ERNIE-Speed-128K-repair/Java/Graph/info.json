{"project_name":"Java","relative_path":"Java/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java","file_name":"ConnectedComponent.java","package":"com.thealgorithms.datastructures.graphs","class_name":"Graph","method_name":"countGraphs","source_code":"public int countGraphs() {\n    int count = 0;\n    Set<Node> markedNodes = new HashSet<Node>();\n    for (Node n : nodeList) {\n        if (!markedNodes.contains(n)) {\n            markedNodes.add(n);\n            markedNodes.addAll(depthFirstSearch(n, new ArrayList<Node>()));\n            count++;\n        }\n    }\n    return count;\n}","context":"package com.thealgorithms.datastructures.graphs;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\nclass Graph {\n    class Node {\n        E name;\n        public Node(E name);\n    }\n    class Edge {\n        Node startNode, endNode;\n        public Edge(Node startNode, Node endNode);\n    }\n    ArrayList<Edge> edgeList;\n    ArrayList<Node> nodeList;\n    public Graph();\n    public  addEdge(E startNode, E endNode);\n    public int countGraphs();\n    public ArrayList<Node> depthFirstSearch(Node n, ArrayList<Node> visited);\n}\npublic class ConnectedComponent {\n    static public  main(String args);\n}","docstring":"/**\n     * Main method used for counting the connected components. Iterates through\n     * the array of nodes to do a depth first search to get all nodes of the\n     * graph from the actual node. These nodes are added to the array\n     * markedNodes and will be ignored if they are chosen in the nodeList.\n     *\n     * @return returns the amount of unconnected graphs\n     */"}